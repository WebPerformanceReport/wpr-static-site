<script>
(function () {
  const form = document.getElementById('subscribeForm');
  if (!form) return;

  const btn  = form.querySelector('[data-submit]');
  const tsEl = form.querySelector('input[name="ts"]');

  const urlInput =
  form.elements['siteUrl'] ||
  form.elements['url'] ||
  form.elements['domain'] ||
  form.querySelector('#siteUrl,[name="siteUrl"],#url,[name="url"],#domain,[name="domain"]');
  const locationInput = form.elements['location'];
  const deviceInput   = form.elements['device'];

  let msgBox = document.getElementById('wpr-messages');
  if (!msgBox) {
    msgBox = document.createElement('div');
    msgBox.id = 'wpr-messages';
    msgBox.className = 'wpr-messages';
    msgBox.setAttribute('role', 'status');
    msgBox.setAttribute('aria-live', 'polite');
    msgBox.hidden = true;
    form.after(msgBox);
  }

  const setTs = () => { if (tsEl) tsEl.value = Math.floor(Date.now() / 1000); };
  setTs();

  function renderMessage(type, text) {
    msgBox.hidden = false;
    msgBox.innerHTML =
      `<div class="wpr-alert wpr-alert--${type}">
         <span class="wpr-alert__icon">${type === 'success' ? '✅' : '❌'}</span>
         <span>${text}</span>
       </div>`;
    msgBox.tabIndex = -1;
    msgBox.focus({ preventScroll: true });
  }

  function humanize(res, data) {
    if (data && typeof data.message === 'string' && data.message.trim()) return data.message;
    switch (res.status) {
      case 201: return 'Subscription received. Check your inbox.';
      case 303: return 'User already exists';
      case 400: return 'Invalid data. Please review your email/URL or accept the policy.';
      case 401:
      case 403: return 'Not authorized.';
      case 429: return 'Too many requests. Please try again later.';
      case 502: return 'Upstream error. Please try again.';
      default:  return 'Something went wrong. Please try again.';
    }
  }

  form.addEventListener('submit', async (e) => {
    e.preventDefault();

    if (!form.reportValidity()) return;

    const email   = (form.elements['email']?.value || '').trim();
    const url     = (urlInput?.value || '').trim();
    const source  = (form.elements['source']?.value || '').trim();
    const company = form.elements['company']?.value || '';
    const ts      = tsEl?.value;
    const consent = form.elements['consent']?.checked ? 'on' : '';

    const payload = { email, url, source, ts, consent };
    if (locationInput) { payload.location = (locationInput.value || '').trim(); }
    if (deviceInput)   { payload.device   = (deviceInput.value   || '').trim(); }

    if (company) { renderMessage('error', 'Error. Please try again.'); return; }

    btn.disabled = true;
    renderMessage('success', 'Submitting…');

    try {
      const res = await fetch(form.action, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
        body: JSON.stringify(payload)
      });

      const data = await res.json().catch(() => ({}));
      const text = humanize(res, data);

      if (res.ok && (data.status === 'success' || res.status === 201)) {
        renderMessage('success', text);
        form.reset();
        setTs();
      } else {
        renderMessage('error', text);
        if (res.status === 400 && /consent|policy/i.test(text)) {
          form.elements['consent']?.focus();
        }
      }
    } catch {
      renderMessage('error', 'Network error. Please try again.');
    } finally {
      btn.disabled = false;
    }
  });
})();
</script>
